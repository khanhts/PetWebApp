document.addEventListener("DOMContentLoaded", async function () {
    const calendarEl = document.getElementById("calendar");
    const dateInput = document.querySelector('input[name="appointment_date"]');
    const timeSelect = document.getElementById("appointmentTime");

    if (calendarEl) {
        await setupCalendar(dateInput, timeSelect);
    }

    if (dateInput) {
        await setupDatePicker(dateInput, timeSelect);
    }
});

/**
 * üìÖ Kh·ªüi t·∫°o FullCalendar v·ªõi s·ª± ki·ªán ch·ªçn ng√†y
 */
async function setupCalendar(dateInput, timeSelect) {
    const calendarEl = document.getElementById("calendar");
    const disabledDates = await fetchDisabledDates();
    const today = new Date().toISOString().split("T")[0];

    const calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: "dayGridMonth",
        locale: "vi",
        selectable: true, // ‚úÖ Cho ph√©p ch·ªçn ng√†y
        editable: false, // Kh√¥ng cho ph√©p k√©o th·∫£
        eventLimit: true,
        events: async function (fetchInfo, successCallback, failureCallback) {
            try {
                const response = await fetch("index.php?controller=appointment&action=getAppointments");
                const data = await response.json();
                const events = data.map(appt => ({
                    title: `${appt.pet} - ${appt.ownerName}`,
                    start: appt.appointmentDate,
                    extendedProps: { id: appt._id }
                }));
                successCallback(events);
            } catch (error) {
                failureCallback(error);
            }
        },
        dateClick: async function (info) {
            const selectedDate = info.dateStr;

            // ‚ùå Ch·∫∑n ng√†y trong qu√° kh·ª©
            if (selectedDate < today) {
                alert("‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch v√†o ng√†y trong qu√° kh·ª©!");
                return;
            }

            // ‚ùå Ki·ªÉm tra n·∫øu ng√†y n√†y b·ªã ch·∫∑n
            if (disabledDates.includes(selectedDate)) {
                alert("‚ùå Ng√†y n√†y ƒë√£ ƒë·∫ßy l·ªãch ho·∫∑c l√† ng√†y l·ªÖ, vui l√≤ng ch·ªçn ng√†y kh√°c!");
                return;
            }

            // ‚úÖ C·∫≠p nh·∫≠t input ng√†y ƒë·∫∑t l·ªãch v√† t·∫£i danh s√°ch gi·ªù
            if (dateInput) {
                dateInput.value = selectedDate;
                await loadAvailableTimes(selectedDate, timeSelect);
            }
        }
    });

    calendar.render();
}

/**
 * üìÖ X·ª≠ l√Ω ch·ªçn ng√†y & t·∫£i gi·ªù tr·ªëng t·ª´ input
 */
async function setupDatePicker(dateInput, timeSelect) {
    const disabledDates = await fetchDisabledDates();
    const today = new Date().toISOString().split("T")[0];

    dateInput.setAttribute("min", today);

    dateInput.addEventListener("change", async function () {
        if (!dateInput.value) return;

        if (disabledDates.includes(dateInput.value)) {
            alert("‚ùå Ng√†y n√†y l√† ng√†y l·ªÖ ho·∫∑c ƒë√£ ƒë·∫ßy l·ªãch, vui l√≤ng ch·ªçn ng√†y kh√°c!");
            dateInput.value = "";
            return;
        }

        await loadAvailableTimes(dateInput.value, timeSelect);
    });
}

/**
 * üõë L·∫•y danh s√°ch ng√†y b·ªã kh√≥a (ng√†y l·ªÖ + ng√†y ƒë√£ ƒë·∫ßy l·ªãch)
 */
async function fetchDisabledDates() {
    const holidays = ["2025-01-01", "2025-04-30", "2025-05-01", "2025-09-02"]; // Ng√†y l·ªÖ c·ªë ƒë·ªãnh

    try {
        const response = await fetch("index.php?controller=appointment&action=getDisabledDates");
        const serverDisabledDates = await response.json();
        return [...new Set([...serverDisabledDates, ...holidays])]; // G·ªôp danh s√°ch
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i danh s√°ch ng√†y b·ªã ch·∫∑n:", error);
        return holidays;
    }
}

/**
 * üïí L·∫•y danh s√°ch gi·ªù tr·ªëng c·ªßa ng√†y ƒë√£ ch·ªçn
 */
async function loadAvailableTimes(date, timeSelect) {
    try {
        const response = await fetch(`index.php?controller=appointment&action=getAvailableTimes&date=${date}`);
        const bookedTimes = await response.json();

        timeSelect.innerHTML = `<option value="">Ch·ªçn gi·ªù</option>`;
        const availableHours = ["08:00", "09:00", "10:00", "14:00", "15:00"];

        availableHours.forEach(time => {
            if (!bookedTimes.includes(time)) {
                const option = document.createElement("option");
                option.value = time;
                option.textContent = time;
                timeSelect.appendChild(option);
            }
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu gi·ªù ƒë·∫∑t:", error);
    }
}
